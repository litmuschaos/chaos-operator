# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2.1

jobs:

  build:
    machine: 
      image: ubuntu-1604:202007-01
    working_directory: ~/go/src/github.com/litmuschaos/chaos-operator
    environment:
      K8S_VERSION: v1.12.0
      KUBECONFIG: /home/circleci/.kube/config
      MINIKUBE_VERSION: v1.3.1
      HOME: /home/circleci
      CHANGE_MINIKUBE_NONE_USER: true
      REPONAME: litmuschaos
      IMGNAME: chaos-operator
      IMGTAG: dev
    steps:
      - checkout
      
      - run: 
          name: Setup buildx
          command: |
            mkdir -vp ~/.docker/cli-plugins/
            curl --silent -L --output ~/.docker/cli-plugins/docker-buildx https://github.com/docker/buildx/releases/download/v0.4.2/buildx-v0.4.2.linux-amd64
            chmod a+x ~/.docker/cli-plugins/docker-buildx
            docker buildx version
            export DOCKER_CLI_EXPERIMENTAL=enabled
            sudo apt-get update && sudo apt-get install qemu-user-static -y
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes i
            docker buildx create --name multibuilder
            docker buildx inspect multibuilder --bootstrap
            docker buildx use multibuilder
       
      - run:
          name: Setup kubectl
          command: | 
            curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
      - run:
          name: Setup minikube
          command: |
            curl -Lo minikube https://storage.googleapis.com/minikube/releases/${MINIKUBE_VERSION}/minikube-linux-amd64  && chmod +x minikube
            sudo install minikube /usr/local/bin
      - run:
          name: Start minikube
          command: |
            sudo -E minikube start --vm-driver=none --cpus 2 --memory 4096 --kubernetes-version=${K8S_VERSION}
      - run: mkdir -p workspace
      - run: 
          name: Setup ENV
          command: |
            echo 'export GOPATH="$HOME/go"' >> workspace/env-vars 
            echo 'export PATH="$GOPATH/bin:$PATH"' >> workspace/env-vars
            echo 'export REPONAME="litmuschaos"' >> workspace/env-vars
            echo 'export IMGNAME="chaos-operator"' >> workspace/env-vars
            echo 'export IMGTAG="dev"' >> workspace/env-vars
            cat workspace/env-vars >> $BASH_ENV
            source $BASH_ENV
      - run: make deps
      - run: make gotasks
      - run: |   
          docker buildx build --file build/Dockerfile --progress plane --platform linux/arm64,linux/amd64 --tag ${REPONAME}/${IMGNAME}:${IMGTAG} .    
      - run: make test 

  push:
    machine: 
      image: ubuntu-1604:202007-01
    environment:
      IMGTAG: dev
    working_directory: ~/go/src/github.com/litmuschaos/chaos-operator
    steps: 
      - attach_workspace:
          at: /tmp/workspace
      - checkout

      - run: 
          name: Setup buildx
          command: |
            mkdir -vp ~/.docker/cli-plugins/
            curl --silent -L --output ~/.docker/cli-plugins/docker-buildx https://github.com/docker/buildx/releases/download/v0.4.2/buildx-v0.4.2.linux-amd64
            chmod a+x ~/.docker/cli-plugins/docker-buildx
            docker buildx version
            export DOCKER_CLI_EXPERIMENTAL=enabled
            sudo apt-get update && sudo apt-get install qemu-user-static -y
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes i
            docker buildx create --name multibuilder
            docker buildx inspect multibuilder --bootstrap
            docker buildx use multibuilder

      - run: 
          name: push
          command: ~/go/src/github.com/litmuschaos/chaos-operator/buildscripts/push --type=dev
          environment:
            REPONAME: litmuschaos
            IMGNAME: chaos-operator
            IMGTAG: dev

  trivy-check:
    machine: true
    environment:
      TRIVYARCH: "64bit"
    steps:
      - run: |
          export VERSION=$(curl --silent "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
          echo ${VERSION}
          sudo apt-get update
          sudo apt-get install -y rpm
          wget https://github.com/aquasecurity/trivy/releases/download/v${VERSION}/trivy_${VERSION}_Linux-${TRIVYARCH}.tar.gz
          tar zxvf trivy_${VERSION}_Linux-${TRIVYARCH}.tar.gz
      - run: |
          ./trivy --exit-code 0 --severity HIGH --no-progress litmuschaos/chaos-operator:dev
          ./trivy --exit-code 0 --severity CRITICAL --no-progress litmuschaos/chaos-operator:dev
          
  release: 
    machine: 
      image: ubuntu-1604:202007-01
    environment:
      IMGTAG: dev
    working_directory: ~/go/src/github.com/litmuschaos/chaos-operator
    steps: 
      - attach_workspace:
          at: /tmp/workspace
      - checkout 
      - run: 
          name: Setup buildx
          command: |
            mkdir -vp ~/.docker/cli-plugins/
            curl --silent -L --output ~/.docker/cli-plugins/docker-buildx https://github.com/docker/buildx/releases/download/v0.4.2/buildx-v0.4.2.linux-amd64
            chmod a+x ~/.docker/cli-plugins/docker-buildx
            docker buildx version
            export DOCKER_CLI_EXPERIMENTAL=enabled
            sudo apt-get update && sudo apt-get install qemu-user-static -y
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes i
            docker buildx create --name multibuilder
            docker buildx inspect multibuilder --bootstrap
            docker buildx use multibuilder

      - run:
          name: release push
          command: ~/go/src/github.com/litmuschaos/chaos-operator/buildscripts/push --type=release
          environment:
            REPONAME: litmuschaos
            IMGNAME: chaos-operator
            IMGTAG: dev      

workflows:
  version: 2
  operator_build_deploy: 
    jobs:
      - build:
          filters:
            ## build jobs needs to be run for branch commits as well as tagged releases
            tags:
              only: /.*/
      - trivy-check:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - push:
          requires: 
            - build
          filters:
            ## push jobs needs to be run for branch commits as well as tagged releases
            ## docker images push won't be performed for PRs due to ENV not being applied
            tags:
              only: /.*/
      - release:
          requires:
            - build
          filters:
            ## release jobs needs to be run for tagged releases alone & not for any branch commits
            branches:
              ignore: /.*/
            tags:
              only: /.*/
